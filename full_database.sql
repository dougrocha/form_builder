-- Most of this is auto generated from drizzle. If you want see see everything
-- check the drizzle folder for all the migrations

CREATE SCHEMA "auth";

CREATE SCHEMA "form";

CREATE TYPE "form"."field_type" AS ENUM('text', 'textarea', 'number', 'email', 'phone', 'checkbox', 'radio');
CREATE TABLE "auth"."account" (
	"id" text PRIMARY KEY NOT NULL,
	"account_id" text NOT NULL,
	"provider_id" text NOT NULL,
	"user_id" text NOT NULL,
	"access_token" text,
	"refresh_token" text,
	"id_token" text,
	"access_token_expires_at" timestamp,
	"refresh_token_expires_at" timestamp,
	"scope" text,
	"password" text,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL
);

CREATE TABLE "auth"."session" (
	"id" text PRIMARY KEY NOT NULL,
	"expires_at" timestamp NOT NULL,
	"token" text NOT NULL,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL,
	"ip_address" text,
	"user_agent" text,
	"user_id" text NOT NULL,
	CONSTRAINT "session_token_unique" UNIQUE("token")
);

CREATE TABLE "auth"."user" (
	"id" text PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"email" text NOT NULL,
	"email_verified" boolean NOT NULL,
	"image" text,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL,
	CONSTRAINT "user_email_unique" UNIQUE("email")
);

CREATE TABLE "auth"."verification" (
	"id" text PRIMARY KEY NOT NULL,
	"identifier" text NOT NULL,
	"value" text NOT NULL,
	"expires_at" timestamp NOT NULL,
	"created_at" timestamp,
	"updated_at" timestamp
);

CREATE TABLE "form"."field" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."field_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"formId" integer NOT NULL,
	"label" varchar(256) NOT NULL,
	"description" varchar(1024),
	"position" integer NOT NULL,
	"type" "form"."field_type" NOT NULL,
	"required" boolean DEFAULT false NOT NULL,
	"createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"updatedAt" timestamp with time zone,
	"isDeleted" boolean DEFAULT false NOT NULL,
	"deletedAt" timestamp with time zone
);

CREATE TABLE "form"."field_option" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."field_option_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"fieldId" integer NOT NULL,
	"value" varchar(256) NOT NULL,
	"position" integer NOT NULL,
	"createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"updatedAt" timestamp with time zone,
	"isDeleted" boolean DEFAULT false NOT NULL,
	"deletedAt" timestamp with time zone
);

CREATE TABLE "form"."field_option_response" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."field_option_response_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"responseFieldId" integer NOT NULL,
	"optionId" integer NOT NULL
);

CREATE TABLE "form"."field_response" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."field_response_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"responseId" integer NOT NULL,
	"fieldId" integer NOT NULL,
	"value" text
);

CREATE TABLE "form"."form" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."form_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"title" varchar(256) NOT NULL,
	"description" varchar(1024),
	"published" boolean DEFAULT false NOT NULL,
	"creator" text NOT NULL,
	"createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"updatedAt" timestamp with time zone,
	"responses" integer DEFAULT 0,
	"share_id" uuid DEFAULT gen_random_uuid(),
	CONSTRAINT "form_share_id_unique" UNIQUE("share_id")
);

CREATE TABLE "form"."response" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "form"."response_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"formId" integer NOT NULL,
	"userId" text NOT NULL,
	"createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE "auth"."account" ADD CONSTRAINT "account_user_id_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "auth"."user"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "auth"."session" ADD CONSTRAINT "session_user_id_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "auth"."user"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."field" ADD CONSTRAINT "field_formId_form_id_fk" FOREIGN KEY ("formId") REFERENCES "form"."form"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."field_option" ADD CONSTRAINT "field_option_fieldId_field_id_fk" FOREIGN KEY ("fieldId") REFERENCES "form"."field"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."field_option_response" ADD CONSTRAINT "field_option_response_responseFieldId_field_response_id_fk" FOREIGN KEY ("responseFieldId") REFERENCES "form"."field_response"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."field_option_response" ADD CONSTRAINT "field_option_response_optionId_field_option_id_fk" FOREIGN KEY ("optionId") REFERENCES "form"."field_option"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "form"."field_response" ADD CONSTRAINT "field_response_responseId_response_id_fk" FOREIGN KEY ("responseId") REFERENCES "form"."response"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."field_response" ADD CONSTRAINT "field_response_fieldId_field_id_fk" FOREIGN KEY ("fieldId") REFERENCES "form"."field"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "form"."form" ADD CONSTRAINT "form_creator_user_id_fk" FOREIGN KEY ("creator") REFERENCES "auth"."user"("id") ON DELETE no action ON UPDATE no action;
ALTER TABLE "form"."response" ADD CONSTRAINT "response_formId_form_id_fk" FOREIGN KEY ("formId") REFERENCES "form"."form"("id") ON DELETE cascade ON UPDATE no action;
ALTER TABLE "form"."response" ADD CONSTRAINT "response_userId_user_id_fk" FOREIGN KEY ("userId") REFERENCES "auth"."user"("id") ON DELETE no action ON UPDATE no action;

-- Create a function to update the response count
CREATE OR REPLACE FUNCTION update_form_response_count()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE form.form
    SET responses = responses + 1
    WHERE id = NEW."form_id";
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger that calls the function after an insert on the response table
CREATE TRIGGER response_insert_trigger
AFTER INSERT ON form.response
FOR EACH ROW
EXECUTE FUNCTION update_form_response_count();
